name: coverity-scan

# Controls when the action will run.
on:
  # Run this action on a schedule (we're allowed a maximum of two per day)
  schedule:
    - cron: '0 18 * * SUN' # Sunday at 18:00 UTC

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-24.04
    if: github.repository == 'nyalldawson/QGIS'
    steps:
      - uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bison build-essential ca-certificates ccache cmake cmake-curses-gui dh-python doxygen expect flex flip gdal-bin git graphviz grass-dev libdraco-dev libexiv2-dev libexpat1-dev libfcgi-dev libgdal-dev libgeos-dev libgsl-dev libpq-dev libproj-dev libprotobuf-dev libqca-qt5-2-dev libqca-qt5-2-plugins libqscintilla2-qt5-dev libqt5opengl5-dev libqt5serialport5-dev libqt5sql5-sqlite libqt5svg5-dev libqt5webkit5-dev libqt5xmlpatterns5-dev libqwt-qt5-dev libspatialindex-dev libspatialite-dev libsqlite3-dev libsqlite3-mod-spatialite libyaml-tiny-perl libzip-dev libzstd-dev lighttpd locales ninja-build ocl-icd-opencl-dev opencl-headers pandoc pkg-config poppler-utils protobuf-compiler pyqt5-dev pyqt5-dev-tools pyqt5.qsci-dev python3-all-dev python3-autopep8 python3-dev python3-gdal python3-jinja2 python3-lxml python3-mock python3-nose2 python3-owslib python3-plotly python3-psycopg2 python3-pygments python3-pyproj python3-pyqt5 python3-pyqt5.qsci python3-pyqt5.qtmultimedia python3-pyqt5.qtpositioning python3-pyqt5.qtserialport python3-pyqt5.qtsql python3-pyqt5.qtsvg python3-pyqt5.qtwebkit python3-pyqtbuild python3-sip python3-termcolor python3-yaml qt3d-assimpsceneimport-plugin qt3d-defaultgeometryloader-plugin qt3d-gltfsceneio-plugin qt3d-scene2d-plugin qt3d5-dev qtbase5-dev qtbase5-private-dev qtkeychain-qt5-dev qtmultimedia5-dev qtpositioning5-dev qttools5-dev qttools5-dev-tools sip-tools spawn-fcgi xauth xfonts-100dpi xfonts-75dpi xfonts-base xfonts-scalable xvfb jq
      - name: Configure QGIS
        run: |
          cmake . \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DENABLE_TESTS=ON
      - name: Download Coverity Build Tool
        run: |
          wget -q https://scan.coverity.com/download/linux64 --post-data "token=$TOKEN&project=qgis%2FQGIS" -O cov-analysis-linux64.tar.gz
          mkdir cov-analysis-linux64
          tar xzf cov-analysis-linux64.tar.gz --strip 1 -C cov-analysis-linux64
        env:
          TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}
      - name: Build with cov-build
        run: |
          pwd
          export PATH=`pwd`/cov-analysis-linux64/bin:$PATH
          cov-build --dir cov-int ninja
      - name: Submit to Coverity Scan
        run: |
          tar czvf qgis.tgz cov-int
          curl -X POST \
            -d version="master" \
            -d description="`git rev-parse --abbrev-ref HEAD` `git rev-parse --short HEAD`" \
            -d email=nyall.dawson@gmail.com \
            -d token=$TOKEN \
            -d file_name="qgis.tgz" \
            https://scan.coverity.com/projects/4126/builds/init \
            | tee response
          upload_url=$(jq -r '.url' response)
          build_id=$(jq -r '.build_id' response)
          curl -X PUT \
            --header 'Content-Type: application/json' \
            --upload-file qgis.tgz \
            $upload_url
          curl -X PUT \
            -d token=$TOKEN \
            https://scan.coverity.com/projects/4126/builds/$build_id/enqueue
        env:
          TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}
