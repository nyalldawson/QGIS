/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/inputcontroller/qgsinputcontroller.h                         *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/





class QgsInputControllerManager : QObject
{
%Docstring(signature="appended")
Manages input control devices.

:py:class:`QgsInputControllerManager` is not usually directly created, but rather accessed through
:py:func:`QgsGui.inputControllerManager()`.

.. versionadded:: 3.32
%End

%TypeHeaderCode
#include "qgsinputcontroller.h"
%End
  public:

    enum class InputControllerType
    {
      Map2D,
      Map3D
    };

    QgsInputControllerManager( QObject *parent /TransferThis/ = 0 );
%Docstring
Constructor for QgsInputControllerManager, with the specified ``parent`` object.

.. note::

   QgsInputControllerManager is not usually directly created, but rather accessed through
   :py:func:`QgsGui.inputControllerManager()`.
%End
    ~QgsInputControllerManager();

    QStringList available2DMapControllers() const;
%Docstring
Returns a list of the device IDs of available 2D map controllers.

.. seealso:: :py:func:`create2DMapController`

.. seealso:: :py:func:`register2DMapController`
%End

    QgsAbstract2DMapController *create2DMapController( const QString &deviceId ) const /Factory/;
%Docstring
Returns a new instance of the 2D map controller with the specified ``deviceId``.

The caller takes ownership of the returned object.

Will return ``None`` if no matching controller is found.

.. seealso:: :py:func:`available2DMapControllers`
%End

    bool register2DMapController( QgsAbstract2DMapController *controller /Transfer/ );
%Docstring
Registers a new 2D map ``controller``.

Ownership of ``controller`` is transferred to the manager.

Returns ``True`` if the controller was successfully registered, or ``False`` if it could
not be registered (e.g. if a controller with matching deviceId has already been registered).

.. seealso:: :py:func:`available2DMapControllers`
%End

    QStringList available3DMapControllers() const;
%Docstring
Returns a list of the device IDs of available 3D map controllers.

.. seealso:: :py:func:`create3DMapController`

.. seealso:: :py:func:`register3DMapController`
%End

    QgsAbstract3DMapController *create3DMapController( const QString &deviceId ) const /Factory/;
%Docstring
Returns a new instance of the 3D map controller with the specified ``deviceId``.

The caller takes ownership of the returned object.

Will return ``None`` if no matching controller is found.

.. seealso:: :py:func:`available3DMapControllers`
%End

    bool register3DMapController( QgsAbstract3DMapController *controller /Transfer/ );
%Docstring
Registers a new 3D map ``controller``.

Ownership of ``controller`` is transferred to the manager.

Returns ``True`` if the controller was successfully registered, or ``False`` if it could
not be registered (e.g. if a controller with matching deviceId has already been registered).

.. seealso:: :py:func:`available3DMapControllers`
%End

};

class QgsAbstractInputController : QObject
{
%Docstring(signature="appended")
Abstract base class for all input controllers.

.. versionadded:: 3.32
%End

%TypeHeaderCode
#include "qgsinputcontroller.h"
%End
  public:

    QgsAbstractInputController( QObject *parent /TransferThis/ = 0 );
%Docstring
Constructor for QgsAbstractInputController, with the specified ``parent`` object.
%End

    virtual QgsAbstractInputController *clone() const = 0 /Factory/;
%Docstring
Returns a new copy of the controller.
%End

    virtual QString deviceId() const = 0;
%Docstring
Returns a string uniquely identifying the device.
%End

    virtual QgsInputControllerManager::InputControllerType type() const = 0;
%Docstring
Returns the input controller type.
%End

};


class QgsAbstract2DMapController : QgsAbstractInputController
{
%Docstring(signature="appended")
Abstract base class for all 2D map controllers.

.. versionadded:: 3.32
%End

%TypeHeaderCode
#include "qgsinputcontroller.h"
%End
%ConvertToSubClassCode
    if ( qobject_cast< QgsAbstract2DMapController * >( sipCpp ) )

      sipType = sipType_QgsAbstract2DMapController;
    else
      sipType = nullptr;
%End
  public:

    QgsAbstract2DMapController( QObject *parent /TransferThis/ = 0 );
%Docstring
Constructor for QgsAbstract2DMapController, with the specified ``parent`` object.
%End

    virtual QgsInputControllerManager::InputControllerType type() const;


  signals:

    void zoomMap( double factor );

};


class QgsAbstract3DMapController : QgsAbstractInputController
{
%Docstring(signature="appended")
Abstract base class for all 3D map controllers.

.. versionadded:: 3.32
%End

%TypeHeaderCode
#include "qgsinputcontroller.h"
%End
%ConvertToSubClassCode
    if ( qobject_cast< QgsAbstract3DMapController * >( sipCpp ) )

      sipType = sipType_QgsAbstract3DMapController;
    else
      sipType = nullptr;
%End
  public:

    QgsAbstract3DMapController( QObject *parent /TransferThis/ = 0 );
%Docstring
Constructor for QgsAbstract3DMapController, with the specified ``parent`` object.
%End

    virtual QgsInputControllerManager::InputControllerType type() const;


  signals:

    void changeCameraAngleByDelta( double delta );
};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/inputcontroller/qgsinputcontroller.h                         *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
