/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/symbology/qgslinedistancerenderer.h                         *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/



class QgsLineDistanceRenderer : QgsFeatureRenderer /Abstract/
{
%Docstring(signature="appended")
An abstract base class for distance based line renderers (e.g., clusterer and displacement renderers).

:py:class:`QgsLineDistanceRenderer` handles calculation of overlapping line segment clusters using a distance based threshold.
Subclasses must implement :py:func:`~drawGroup` to handle the rendering of individual line segment clusters
in the desired style.

.. versionadded:: 3.36
%End

%TypeHeaderCode
#include "qgslinedistancerenderer.h"
%End
  public:


    struct GroupedFeature
    {

        GroupedFeature( const QgsFeature &feature, QgsMarkerSymbol *symbol /Transfer/, bool isSelected );
%Docstring
Constructor for GroupedFeature.

:param feature: feature
:param symbol: base symbol for rendering feature (owned by GroupedFeature)
:param isSelected: set to ``True`` if feature is selected and should be rendered in a selected state
%End
        ~GroupedFeature();

        QgsFeature feature;

        QgsMarkerSymbol *symbol() const;
%Docstring
Base symbol for rendering feature
%End

        bool isSelected;

    };

    typedef QList< QgsLineDistanceRenderer::GroupedFeature > ClusteredGroup;


    QgsLineDistanceRenderer( const QString &rendererName );
%Docstring
Constructor for QgsLineDistanceRenderer.
%End
    ~QgsLineDistanceRenderer();

    virtual void toSld( QDomDocument &doc, QDomElement &element, const QVariantMap &props = QVariantMap() ) const;

    virtual bool renderFeature( const QgsFeature &feature, QgsRenderContext &context, int layer = -1, bool selected = false, bool drawVertexMarker = false ) throw( QgsCsException );

    virtual QSet<QString> usedAttributes( const QgsRenderContext &context ) const;

    virtual bool filterNeedsGeometry() const;

    virtual QgsFeatureRenderer::Capabilities capabilities();

    virtual QgsSymbolList symbols( QgsRenderContext &context ) const;

    virtual QgsSymbol *symbolForFeature( const QgsFeature &feature, QgsRenderContext &context ) const;

    virtual QgsSymbol *originalSymbolForFeature( const QgsFeature &feature, QgsRenderContext &context ) const;

    virtual QgsSymbolList symbolsForFeature( const QgsFeature &feature, QgsRenderContext &context ) const;

    virtual QgsSymbolList originalSymbolsForFeature( const QgsFeature &feature, QgsRenderContext &context ) const;

    virtual QSet< QString > legendKeysForFeature( const QgsFeature &feature, QgsRenderContext &context ) const;

    virtual QString legendKeyToExpression( const QString &key, QgsVectorLayer *layer, bool &ok ) const;

    virtual bool willRenderFeature( const QgsFeature &feature, QgsRenderContext &context ) const;

    virtual void startRender( QgsRenderContext &context, const QgsFields &fields );

    virtual void stopRender( QgsRenderContext &context );

    virtual QgsLegendSymbolList legendSymbolItems() const;

    virtual void setEmbeddedRenderer( QgsFeatureRenderer *r /Transfer/ );

    virtual const QgsFeatureRenderer *embeddedRenderer() const;

    virtual void setLegendSymbolItem( const QString &key, QgsSymbol *symbol /Transfer/ );

    virtual bool legendSymbolItemsCheckable() const;

    virtual bool legendSymbolItemChecked( const QString &key );

    virtual void checkLegendSymbolItem( const QString &key, bool state );

    virtual QString filter( const QgsFields &fields = QgsFields() );

    virtual bool accept( QgsStyleEntityVisitorInterface *visitor ) const;


    void setTolerance( double distance );
%Docstring
Sets the tolerance ``distance`` for grouping line segments. Units are specified using
:py:func:`~QgsLineDistanceRenderer.setToleranceUnit`.

.. seealso:: :py:func:`tolerance`

.. seealso:: :py:func:`setToleranceUnit`
%End

    double tolerance() const;
%Docstring
Returns the tolerance distance for grouping line segments. Units are retrieved using
:py:func:`~QgsLineDistanceRenderer.toleranceUnit`.

.. seealso:: :py:func:`setTolerance`

.. seealso:: :py:func:`toleranceUnit`
%End

    void setToleranceUnit( Qgis::RenderUnit unit );
%Docstring
Sets the ``unit`` for the tolerance distance.

.. seealso:: :py:func:`setTolerance`

.. seealso:: :py:func:`toleranceUnit`
%End

    Qgis::RenderUnit toleranceUnit() const;
%Docstring
Returns the units for the tolerance distance.

.. seealso:: :py:func:`tolerance`

.. seealso:: :py:func:`setToleranceUnit`
%End

    void setToleranceMapUnitScale( const QgsMapUnitScale &scale );
%Docstring
Sets the map unit ``scale`` object for the distance tolerance. This is only used if the
:py:func:`~QgsLineDistanceRenderer.toleranceUnit` is set to :py:class:`Qgis`.RenderUnit.MapUnits.

.. seealso:: :py:func:`toleranceMapUnitScale`

.. seealso:: :py:func:`setToleranceUnit`
%End

    const QgsMapUnitScale &toleranceMapUnitScale() const;
%Docstring
Returns the map unit scale object for the distance tolerance. This is only used if the
:py:func:`~QgsLineDistanceRenderer.toleranceUnit` is set to :py:class:`Qgis`.RenderUnit.MapUnits.

.. seealso:: :py:func:`setToleranceMapUnitScale`

.. seealso:: :py:func:`toleranceUnit`
%End

    void setAngleThreshold( double threshold );
%Docstring
Sets the angle ``threshold`` (in degrees) for nearby line segments to be considered overlapping.

If the angle between the two segments is greater than this threshold than the segments
will not be considered overlapping. This setting can be used to avoid considering "T" type
intersections as overlapping segments.

.. seealso:: :py:func:`angleThreshold`
%End

    double angleThreshold() const;
%Docstring
Returns the angle threshold (in degrees) for nearby line segments to be considered overlapping.

If the angle between the two segments is greater than this threshold than the segments
will not be considered overlapping. This setting can be used to avoid considering "T" type
intersections as overlapping segments.

.. seealso:: :py:func:`setAngleThreshold`
%End

  protected:


};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/symbology/qgslinedistancerenderer.h                         *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
